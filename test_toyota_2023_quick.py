"""
Test rapide pour voir exactement quels mod√®les Toyota 2023 sont retourn√©s
"""
import os
import sys
import django

# Configuration Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markev_project.settings')
django.setup()

from django.test import Client
from django.contrib.auth.models import User

def test_exact_toyota_2023():
    """Test exact de ce que retourne l'endpoint pour Toyota 2023"""
    print("üîç TEST EXACT - Toyota 2023")
    print("=" * 50)
    
    # Cr√©er un client de test
    client = Client()
    
    # Cr√©er un utilisateur de test
    user, created = User.objects.get_or_create(
        username='testuser',
        defaults={'email': 'test@example.com'}
    )
    
    # Se connecter
    client.force_login(user)
    
    try:
        # Test exact de ce qui est appel√© dans l'interface
        response = client.get('/api/vehicle-models/?make=TOYOTA&year=2023')
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                models = data.get('models', [])
                model_names = [model['name'] for model in models]
                model_names.sort()  # Tri alphab√©tique
                
                print(f"‚úÖ {len(models)} mod√®les r√©cup√©r√©s pour Toyota 2023")
                print(f"üìã Liste compl√®te des mod√®les (tri√©s alphab√©tiquement):")
                
                for i, model in enumerate(model_names, 1):
                    marker = "üéØ" if 'bZ4X' in model or 'BZ4X' in model else "  "
                    print(f"   {i:2d}. {marker} {model}")
                
                # V√©rification sp√©cifique du bZ4X
                bz4x_found = [model for model in model_names if 'bZ4X' in model or 'BZ4X' in model]
                if bz4x_found:
                    print(f"\nüéâ bZ4X TROUV√â: {bz4x_found}")
                    print(f"   Position dans la liste: {model_names.index(bz4x_found[0]) + 1}")
                else:
                    print(f"\n‚ùå bZ4X NON TROUV√â dans la liste")
                    
                    # Chercher des mod√®les similaires
                    b_models = [model for model in model_names if model.upper().startswith('B')]
                    print(f"   Mod√®les commen√ßant par B: {b_models}")
                    
                    z_models = [model for model in model_names if 'Z' in model.upper()]
                    print(f"   Mod√®les contenant Z: {z_models}")
                
                return model_names
            else:
                print(f"‚ùå R√©ponse success=False: {data.get('message')}")
                return []
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return []

def test_without_year():
    """Test sans sp√©cifier d'ann√©e"""
    print(f"\nüîç TEST SANS ANN√âE - Toyota (tous mod√®les)")
    print("=" * 50)
    
    # Cr√©er un client de test
    client = Client()
    
    # Cr√©er un utilisateur de test
    user, created = User.objects.get_or_create(
        username='testuser',
        defaults={'email': 'test@example.com'}
    )
    
    # Se connecter
    client.force_login(user)
    
    try:
        response = client.get('/api/vehicle-models/?make=TOYOTA')
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                models = data.get('models', [])
                model_names = [model['name'] for model in models]
                model_names.sort()
                
                print(f"‚úÖ {len(models)} mod√®les r√©cup√©r√©s pour Toyota (sans ann√©e)")
                
                # Chercher bZ4X
                bz4x_found = [model for model in model_names if 'bZ4X' in model or 'BZ4X' in model]
                if bz4x_found:
                    print(f"üéâ bZ4X TROUV√â: {bz4x_found}")
                else:
                    print(f"‚ùå bZ4X NON TROUV√â")
                
                # Afficher les 20 premiers mod√®les
                print(f"üìã Les 20 premiers mod√®les:")
                for i, model in enumerate(model_names[:20], 1):
                    print(f"   {i:2d}. {model}")
                
                return model_names
            else:
                print(f"‚ùå R√©ponse success=False: {data.get('message')}")
                return []
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return []

def main():
    """Fonction principale"""
    print("üß™ DIAGNOSTIC RAPIDE - TOYOTA BZ4X")
    print("üè¢ Garage MarKev - V√©rification Interface")
    print("=" * 80)
    
    # Test avec ann√©e 2023
    models_2023 = test_exact_toyota_2023()
    
    # Test sans ann√©e
    models_all = test_without_year()
    
    print("\n" + "=" * 80)
    print("üìä DIAGNOSTIC")
    print("=" * 80)
    
    if models_2023:
        has_bz4x_2023 = any('bZ4X' in model or 'BZ4X' in model for model in models_2023)
        print(f"üîç Toyota 2023: {len(models_2023)} mod√®les, bZ4X pr√©sent: {'‚úÖ OUI' if has_bz4x_2023 else '‚ùå NON'}")
    
    if models_all:
        has_bz4x_all = any('bZ4X' in model or 'BZ4X' in model for model in models_all)
        print(f"üîç Toyota (tous): {len(models_all)} mod√®les, bZ4X pr√©sent: {'‚úÖ OUI' if has_bz4x_all else '‚ùå NON'}")
    
    print(f"\nüí° RECOMMANDATION:")
    print("   1. Saisissez '2023' dans le champ Ann√©e AVANT de s√©lectionner Toyota")
    print("   2. Puis s√©lectionnez Toyota dans Marque")
    print("   3. Le champ Mod√®le devrait se recharger avec les mod√®les 2023")
    print("   4. Cherchez 'bZ4X' au d√©but de la liste")

if __name__ == "__main__":
    main()
