"""
Test complet d'envoi d'email de facture avec PDF
"""
import os
import sys
import django

# Configuration Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markev_project.settings')
django.setup()

from garage_app.models import Client, Vehicle, Invoice, Service, VehicleType
from django.contrib.auth.models import User
from django.core.mail import EmailMessage
from django.conf import settings

def create_test_data():
    """Cr√©er des donn√©es de test pour la facture"""
    print("üìã Cr√©ation des donn√©es de test...")
    
    # Cr√©er un client de test
    client, created = Client.objects.get_or_create(
        email='the_adicts@hotmail.com',
        defaults={
            'first_name': 'Test',
            'last_name': 'SendGrid',
            'phone': '514-123-4567',
            'address': '123 Rue Test, Montr√©al, QC'
        }
    )
    
    if created:
        print(f"‚úÖ Client cr√©√© : {client.first_name} {client.last_name}")
    else:
        print(f"‚úÖ Client existant : {client.first_name} {client.last_name}")
    
    # Cr√©er un type de v√©hicule
    vehicle_type, _ = VehicleType.objects.get_or_create(
        name='Berline',
        defaults={'description': 'V√©hicule de type berline'}
    )
    
    # Cr√©er un v√©hicule de test
    vehicle, created = Vehicle.objects.get_or_create(
        client=client,
        make='Toyota',
        model='Camry',
        year=2023,
        defaults={
            'vehicle_type': vehicle_type,
            'color': 'Blanc',
            'license_plate': 'TEST123'
        }
    )
    
    if created:
        print(f"‚úÖ V√©hicule cr√©√© : {vehicle.make} {vehicle.model} {vehicle.year}")
    else:
        print(f"‚úÖ V√©hicule existant : {vehicle.make} {vehicle.model} {vehicle.year}")
    
    # Cr√©er des services de test
    service1, _ = Service.objects.get_or_create(
        name='Vitre Teint√©e - Standard',
        defaults={
            'category': 'vitres_teintees',
            'quality_level': 'standard',
            'price': 299.99,
            'description': 'Installation de vitres teint√©es standard'
        }
    )
    
    service2, _ = Service.objects.get_or_create(
        name='Protection C√©ramique - Premium',
        defaults={
            'category': 'protection_ceramique',
            'quality_level': 'premium',
            'price': 899.99,
            'description': 'Application de protection c√©ramique premium'
        }
    )
    
    print(f"‚úÖ Services disponibles : {service1.name}, {service2.name}")
    
    return client, vehicle, [service1, service2]

def create_test_invoice(client, vehicle, services):
    """Cr√©er une facture de test"""
    print("\nüìÑ Cr√©ation de la facture de test...")

    from django.utils import timezone

    # Cr√©er la facture
    invoice = Invoice.objects.create(
        client=client,
        vehicle=vehicle,
        status='finalized',
        invoice_date=timezone.now().date(),
        notes='Facture de test pour validation SendGrid'
    )
    
    # Ajouter les services
    for service in services:
        invoice.services.add(service)
    
    # Calculer le total
    invoice.calculate_total()
    invoice.save()
    
    print(f"‚úÖ Facture cr√©√©e : #{invoice.id}")
    print(f"   Client : {client.first_name} {client.last_name}")
    print(f"   V√©hicule : {vehicle.make} {vehicle.model} {vehicle.year}")
    print(f"   Services : {invoice.services.count()}")
    print(f"   Total : ${invoice.total_amount:.2f}")
    
    return invoice

def test_email_sending(invoice):
    """Tester l'envoi d'email avec la facture"""
    print(f"\nüìß Test d'envoi d'email pour la facture #{invoice.id}...")

    try:
        # G√©n√©rer le PDF de la facture
        from reportlab.lib.pagesizes import letter
        from reportlab.pdfgen import canvas
        from io import BytesIO

        buffer = BytesIO()
        p = canvas.Canvas(buffer, pagesize=letter)

        # Contenu du PDF
        p.drawString(100, 750, f"FACTURE #{invoice.id}")
        p.drawString(100, 720, f"Garage MarKev")
        p.drawString(100, 690, f"Client: {invoice.client.first_name} {invoice.client.last_name}")
        p.drawString(100, 660, f"V√©hicule: {invoice.vehicle.make} {invoice.vehicle.model} {invoice.vehicle.year}")
        p.drawString(100, 630, f"Total: ${invoice.total_amount:.2f}")
        p.drawString(100, 600, f"Date: {invoice.created_at.strftime('%Y-%m-%d')}")

        # Services
        y_position = 570
        p.drawString(100, y_position, "Services:")
        for service in invoice.services.all():
            y_position -= 20
            p.drawString(120, y_position, f"‚Ä¢ {service.name} - ${service.price:.2f}")

        p.showPage()
        p.save()

        # Cr√©er l'email
        subject = f"Facture #{invoice.id} - Garage MarKev"
        message = f"""
Bonjour {invoice.client.first_name},

Veuillez trouver ci-joint votre facture #{invoice.id}.

D√©tails:
- V√©hicule: {invoice.vehicle.make} {invoice.vehicle.model} {invoice.vehicle.year}
- Montant total: ${invoice.total_amount:.2f}
- Date: {invoice.created_at.strftime('%Y-%m-%d')}

Merci de votre confiance !

Cordialement,
L'√©quipe Garage MarKev
        """

        email = EmailMessage(
            subject=subject,
            body=message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            to=[invoice.client.email],
        )

        # Attacher le PDF
        buffer.seek(0)
        email.attach(f'facture_{invoice.id}.pdf', buffer.getvalue(), 'application/pdf')

        # Envoyer l'email
        email.send()

        print("‚úÖ Email envoy√© avec succ√®s !")
        print(f"üìß Destinataire : {invoice.client.email}")
        print(f"üìÑ Facture : #{invoice.id}")
        print(f"üí∞ Montant : ${invoice.total_amount:.2f}")

        print(f"\nüìã D√©tails de l'envoi :")
        print(f"   Exp√©diteur : {settings.DEFAULT_FROM_EMAIL}")
        print(f"   Destinataire : {invoice.client.email}")
        print(f"   Sujet : {subject}")
        print(f"   PDF inclus : Oui")

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi : {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_admin_action():
    """Tester l'action d'administration SendGrid"""
    print(f"\nüîß Test de l'action d'administration...")
    
    from django.test import RequestFactory
    from garage_app.admin import VehicleAdmin
    from garage_app.models import Vehicle
    
    # Cr√©er une requ√™te factice
    factory = RequestFactory()
    request = factory.get('/admin/')
    
    # Cr√©er un utilisateur admin
    user, _ = User.objects.get_or_create(
        username='admin',
        defaults={
            'email': 'the_adicts@hotmail.com',
            'is_staff': True,
            'is_superuser': True
        }
    )
    request.user = user
    
    # Tester l'action
    admin = VehicleAdmin(Vehicle, None)
    queryset = Vehicle.objects.all()[:1]  # Prendre un v√©hicule
    
    try:
        admin.test_sendgrid_config(request, queryset)
        print("‚úÖ Action d'administration ex√©cut√©e")
        return True
    except Exception as e:
        print(f"‚ùå Erreur action admin : {str(e)}")
        return False

def cleanup_test_data():
    """Nettoyer les donn√©es de test (optionnel)"""
    response = input("\nüóëÔ∏è Voulez-vous supprimer les donn√©es de test ? (y/N) : ")
    
    if response.lower() == 'y':
        print("üßπ Nettoyage des donn√©es de test...")
        
        # Supprimer les factures de test
        test_invoices = Invoice.objects.filter(
            notes__contains='test pour validation SendGrid'
        )
        count = test_invoices.count()
        test_invoices.delete()
        
        print(f"‚úÖ {count} facture(s) de test supprim√©e(s)")
    else:
        print("‚úÖ Donn√©es de test conserv√©es")

def main():
    """Fonction principale de test"""
    print("üìß TEST COMPLET D'ENVOI D'EMAIL DE FACTURE")
    print("üè¢ Garage MarKev - Validation SendGrid")
    print("=" * 80)
    
    try:
        # Cr√©er les donn√©es de test
        client, vehicle, services = create_test_data()
        
        # Cr√©er une facture de test
        invoice = create_test_invoice(client, vehicle, services)
        
        # Tester l'envoi d'email
        email_success = test_email_sending(invoice)
        
        # Tester l'action d'administration
        admin_success = test_admin_action()
        
        print("\n" + "=" * 80)
        print("üìä R√âSULTATS DES TESTS")
        print("=" * 80)
        
        print(f"üìß Envoi d'email de facture : {'‚úÖ SUCC√àS' if email_success else '‚ùå √âCHEC'}")
        print(f"üîß Action d'administration : {'‚úÖ SUCC√àS' if admin_success else '‚ùå √âCHEC'}")
        
        if email_success:
            print(f"\nüéâ SENDGRID FONCTIONNE PARFAITEMENT !")
            print(f"üìß V√©rifiez votre bo√Æte email : {client.email}")
            print(f"üìÑ Vous devriez avoir re√ßu la facture #{invoice.id} en PDF")
            print(f"üí∞ Montant de la facture : ${invoice.total_amount:.2f}")
            
            print(f"\nüöÄ Prochaines √©tapes :")
            print("   1. V√©rifiez la r√©ception de l'email")
            print("   2. Ouvrez le PDF de la facture")
            print("   3. Testez depuis l'interface web")
            print("   4. L'envoi d'emails est maintenant op√©rationnel !")
        else:
            print(f"\n‚ùå PROBL√àME D√âTECT√â")
            print("   V√©rifiez les logs pour plus de d√©tails")
        
        # Proposer le nettoyage
        cleanup_test_data()
        
    except Exception as e:
        print(f"\n‚ùå Erreur g√©n√©rale lors des tests: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
