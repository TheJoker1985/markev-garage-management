from django.core.management.base import BaseCommand
from django.db import transaction
from garage_app.models import RecurringExpense
from datetime import date


class Command(BaseCommand):
    help = 'Cr√©er les d√©penses r√©currentes qui sont dues'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Simuler la cr√©ation sans effectuer les modifications'
        )
        parser.add_argument(
            '--force-all',
            action='store_true',
            help='Forcer la cr√©ation pour toutes les d√©penses r√©currentes actives'
        )
        parser.add_argument(
            '--days-ahead',
            type=int,
            default=0,
            help='Cr√©er les d√©penses dues dans X jours (d√©faut: 0 = aujourd\'hui seulement)'
        )

    def handle(self, *args, **options):
        self.dry_run = options['dry_run']
        self.force_all = options['force_all']
        self.days_ahead = options['days_ahead']
        
        if self.dry_run:
            self.stdout.write(
                self.style.WARNING('üîç MODE SIMULATION - Aucune d√©pense ne sera cr√©√©e')
            )
        
        try:
            # Obtenir les d√©penses r√©currentes √† traiter
            recurring_expenses = self.get_due_recurring_expenses()
            
            if not recurring_expenses:
                self.stdout.write('‚ÑπÔ∏è Aucune d√©pense r√©currente due trouv√©e')
                return
            
            # Afficher le r√©sum√©
            self.display_summary(recurring_expenses)
            
            if not self.dry_run:
                # Cr√©er les d√©penses
                created_count = self.create_expenses(recurring_expenses)
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ {created_count} d√©pense(s) cr√©√©e(s) avec succ√®s!')
                )
            else:
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Simulation termin√©e. Retirez --dry-run pour cr√©er les d√©penses.')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur lors de la cr√©ation des d√©penses r√©currentes: {str(e)}')
            )
            raise

    def get_due_recurring_expenses(self):
        """Obtenir les d√©penses r√©currentes dues"""
        if self.force_all:
            # Toutes les d√©penses r√©currentes actives
            return RecurringExpense.objects.filter(is_active=True)
        
        # D√©penses dues aujourd'hui ou dans les X jours
        target_date = date.today()
        if self.days_ahead > 0:
            from datetime import timedelta
            target_date = date.today() + timedelta(days=self.days_ahead)
        
        return RecurringExpense.objects.filter(
            is_active=True,
            next_due_date__lte=target_date
        )

    def display_summary(self, recurring_expenses):
        """Afficher le r√©sum√© des d√©penses √† cr√©er"""
        self.stdout.write('\n' + '='*60)
        self.stdout.write('üìã R√âSUM√â DES D√âPENSES R√âCURRENTES √Ä CR√âER')
        self.stdout.write('='*60)
        
        total_amount = 0
        for expense in recurring_expenses:
            self.stdout.write(
                f'üí∞ {expense.name} - {expense.supplier or "Aucun fournisseur"}'
            )
            self.stdout.write(
                f'   Montant: {expense.total_with_taxes:.2f}$ - '
                f'√âch√©ance: {expense.next_due_date.strftime("%d/%m/%Y")} - '
                f'Fr√©quence: {expense.get_frequency_display()}'
            )
            total_amount += expense.total_with_taxes
        
        self.stdout.write(f'\nüíµ TOTAL: {total_amount:.2f}$')
        self.stdout.write(f'üìä NOMBRE: {recurring_expenses.count()} d√©pense(s)')
        self.stdout.write('='*60 + '\n')

    @transaction.atomic
    def create_expenses(self, recurring_expenses):
        """Cr√©er les d√©penses √† partir des d√©penses r√©currentes"""
        created_count = 0
        
        for recurring_expense in recurring_expenses:
            try:
                # Cr√©er la d√©pense
                expense = recurring_expense.create_expense()
                
                self.stdout.write(
                    f'‚úì Cr√©√©: {expense.description} - {expense.total_with_taxes:.2f}$ '
                    f'(√âch√©ance suivante: {recurring_expense.next_due_date.strftime("%d/%m/%Y")})'
                )
                
                created_count += 1
                
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(
                        f'‚ùå Erreur lors de la cr√©ation de "{recurring_expense.name}": {str(e)}'
                    )
                )
                continue
        
        return created_count

    def get_statistics(self):
        """Obtenir des statistiques sur les d√©penses r√©currentes"""
        total_active = RecurringExpense.objects.filter(is_active=True).count()
        total_inactive = RecurringExpense.objects.filter(is_active=False).count()
        
        # D√©penses par fr√©quence
        frequencies = RecurringExpense.objects.filter(is_active=True).values_list('frequency', flat=True)
        frequency_counts = {}
        for freq in frequencies:
            frequency_counts[freq] = frequency_counts.get(freq, 0) + 1
        
        return {
            'total_active': total_active,
            'total_inactive': total_inactive,
            'frequency_counts': frequency_counts
        }

    def display_statistics(self):
        """Afficher les statistiques des d√©penses r√©currentes"""
        stats = self.get_statistics()
        
        self.stdout.write('\nüìä STATISTIQUES DES D√âPENSES R√âCURRENTES:')
        self.stdout.write(f'   Actives: {stats["total_active"]}')
        self.stdout.write(f'   Inactives: {stats["total_inactive"]}')
        
        if stats['frequency_counts']:
            self.stdout.write('\nüìÖ R√âPARTITION PAR FR√âQUENCE:')
            for freq, count in stats['frequency_counts'].items():
                freq_display = dict(RecurringExpense.FREQUENCY_CHOICES).get(freq, freq)
                self.stdout.write(f'   {freq_display}: {count}')


# Fonction utilitaire pour √™tre appel√©e depuis d'autres endroits
def create_due_recurring_expenses():
    """Fonction utilitaire pour cr√©er les d√©penses r√©currentes dues"""
    from django.core.management import call_command
    call_command('create_recurring_expenses')


# Exemple d'utilisation dans une t√¢che cron
"""
# Ajouter cette ligne dans votre crontab pour ex√©cuter quotidiennement √† 9h00:
# 0 9 * * * cd /path/to/your/project && python manage.py create_recurring_expenses

# Ou pour une v√©rification avec 3 jours d'avance:
# 0 9 * * * cd /path/to/your/project && python manage.py create_recurring_expenses --days-ahead 3
"""
